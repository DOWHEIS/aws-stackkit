import { CustomResource, Fn, Stack, StackProps, Duration } from 'aws-cdk-lib'
import { Construct } from 'constructs'
import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'
import { Runtime } from 'aws-cdk-lib/aws-lambda'
import { RestApi, LambdaIntegration, Cors, ApiKey, UsagePlan } from 'aws-cdk-lib/aws-apigateway'
import { Vpc, SubnetType, SecurityGroup, Port } from 'aws-cdk-lib/aws-ec2'
import { DatabaseCluster } from 'aws-cdk-lib/aws-rds'
import { Secret } from 'aws-cdk-lib/aws-secretsmanager'
import { PolicyStatement } from 'aws-cdk-lib/aws-iam'
import * as path from 'path'

export class {{stackClassName}} extends Stack {
    constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, props)

        // --- API Gateway ---
        const api = new RestApi(this, '{{stackResourceId}}', {
            restApiName: '{{name}}',
            description: '{{description}}',
            defaultCorsPreflightOptions: {
                allowOrigins: Cors.ALL_ORIGINS,
                allowMethods: Cors.ALL_METHODS,
                    allowHeaders: [
                      'Content-Type',
                      'X-Amz-Date',
                      'Authorization',
                      'X-Api-Key',
                      'X-Amz-Security-Token',
                      'X-Return-URL',
                      'Accept'
                    ],
                    exposeHeaders: [
                      'X-Auth-Location'
                    ]
            }
        })

        const vpcId = Fn.importValue('CoreVpcId');
        const privateSubnet1 = Fn.importValue('CoreVpcPrivateSubnet1');
        const privateSubnet2 = Fn.importValue('CoreVpcPrivateSubnet2');
        const dbSecurityGroupId = Fn.importValue('CoreDbSecurityGroupId');
        const dbSecretArn = Fn.importValue('CoreDbSecretArn');
        const dbClusterArn = Fn.importValue('CoreDbClusterArn');
        const clusterIdentifier = Fn.importValue('CoreClusterIdentifier');
        const createDbServiceToken = Fn.importValue('CoreCreateDbServiceToken');

        {{{infra}}}

{{{dbResource}}}

{{{apiKeys}}}

{{#hasAuthRoutes}}
          const ssoLoginLambda = new NodejsFunction(this, '{{stackResourceId}}SsoLoginLambda', {
            entry: path.join(__dirname, '../wrapped/__internal__/auth_login/index.ts'),
            handler: 'main',
            runtime: Runtime.NODEJS_22_X,
          })

          const authResource = api.root.addResource('auth')
          const loginResource = authResource.addResource('prelogin')
          loginResource.addMethod('GET', new LambdaIntegration(ssoLoginLambda))

          const ssoLoginApproveLambda = new NodejsFunction(this, '{{stackResourceId}}SsoLoginApproveLambda', {
            entry: path.join(__dirname, '../wrapped/__internal__/auth_approve/index.ts'),
            handler: 'main',
            runtime: Runtime.NODEJS_22_X,
          })

          const approveResource = authResource.addResource('approve')
          approveResource.addMethod('GET', new LambdaIntegration(ssoLoginApproveLambda))
        {{/hasAuthRoutes}}

{{{lambdaDecls}}}

{{{routeDecls}}}

{{{usagePlan}}}

    }
}
